name: Deploy to GKE

on:
  workflow_dispatch: # Enables manual trigger for deployment

jobs:
  deploy-to-gke:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository (optional if configuration files are in the repo)
      - name: Checkout code
        uses: actions/checkout@v3

      # Authenticate with Google Cloud
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Set up gcloud CLI
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: "kubectl"  # Install kubectl to interact with GKE

      # Configure Docker to authenticate with Artifact Registry
      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # List and get the most recent image tag from Artifact Registry
      - name: Pull the latest Docker image from GAR
        id: pull_image
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/containerized-api-deployment/my-repo/flask-app"
          
          # Assuming the tag is static for now (latest)
          IMAGE_TAG="latest"
          
          # Set the image URI and pass it using environment variables
          echo "IMAGE=$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      # Deploy the image to GKE
      - name: Deploy to GKE
        run: |
          IMAGE_URI=${{ env.IMAGE }}
          
          # Get the credentials for the GKE cluster
          gcloud container clusters get-credentials my-cluster --zone us-central1-a --project ${{ secrets.GCP_PROJECT_ID }}
          
          # Update the Kubernetes deployment to use the new image
          kubectl set image deployment/my-deployment my-container=$IMAGE_URI --record

          # Alternatively, you can apply a Kubernetes manifest to create or update the deployment
          # kubectl apply -f kubernetes/deployment.yaml


      # - name: Deploy to GKE
      #   run: |
      #     IMAGE_URI=us-central1-docker.pkg.dev/my-project/my-repo/my-app:latest
          
      #     # Get the credentials for the correct GKE cluster
      #     gcloud container clusters get-credentials production-cluster --zone us-west1-b --project ${{ secrets.GCP_PROJECT_ID }}
          
      #     # Update the Kubernetes deployment to use the new image
      #     kubectl set image deployment/my-deployment my-container=$IMAGE_URI --record

      #     # Alternatively, you can apply a Kubernetes manifest to create or update the deployment
      #     # kubectl apply -f kubernetes/deployment.yaml
  ```