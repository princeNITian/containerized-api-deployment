name: Deploy to GKE

on:
  workflow_dispatch: # Manually triggered deployment

jobs:
  deploy-to-gke:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository (optional, in case you have Kubernetes manifests in the repo)
      - name: Checkout code
        uses: actions/checkout@v3

      # Authenticate to Google Cloud
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Set up gcloud CLI
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: "kubectl" # Install kubectl for Kubernetes access

      # Configure Docker to authenticate with Artifact Registry
      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # Get the most recent image tag from GAR (if dynamic)
      - name: Get the latest image tag from GAR
        id: get_image_tag
        run: |
          IMAGE_NAME="us-central1-docker.pkg.dev/my-project/my-repo/flask-app"
          # If you want to fetch the most recent image, you'll need to query your GAR registry for the latest tag.
          # For now, assuming the tag is static (replace this with dynamic fetching logic if necessary)
          IMAGE_TAG="latest"  # Update with dynamic tag if required

          echo "::set-output name=image::$IMAGE_NAME:$IMAGE_TAG"

      # Deploy the image to GKE
      - name: Deploy to GKE
        run: |
          IMAGE_URI=${{ steps.get_image_tag.outputs.image }}

          # Set the GKE cluster context
          gcloud container clusters get-credentials my-cluster --zone us-central1-a --project ${{ secrets.GCP_PROJECT_ID }}

          # Deploy the Docker image to GKE (using Kubernetes manifests or Helm)
          kubectl set image deployment/my-deployment my-container=$IMAGE_URI --record

          # Alternatively, you can apply a Kubernetes manifest that defines the deployment:
          # kubectl apply -f kubernetes/deployment.yaml
